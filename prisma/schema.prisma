// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Project {
    id          String    @id @default(cuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String?
    color       String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Task        Task[]
    Comment     Comment[]
}

enum TaskStatus {
    TODO
    INPROGRESS
    DONE
    CANCELLED
}

model Task {
    id          String     @id @default(cuid())
    projectId   String?
    project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    userId      String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String?
    date        DateTime?
    color       String     @default("#f44336")
    tags        String[]   @default([])
    status      TaskStatus @default(TODO)
    priority    Boolean    @default(false)
    pinned      Boolean    @default(false)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Comment {
    id        String   @id @default(cuid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Task          Task[]
    Comment       Comment[]
    Project       Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
